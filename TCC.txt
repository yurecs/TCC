1. Introdução
	* Desenvolvimento de softaware em geral
	
Os software hoje estão tão integrados a vida cotidina de maneira que seria impossível manter a mesma eficiência e eficácia dos serviços
informáticos que ele prestam retrocedento a metodos e ferramentas antigos hoje estão desuso, restando poucos a terem suas funcões
transportadas para o mundo digital. Com uma demanda maior por serviços rápidos e seguros, o impacto da indisponibilidade ou falha de um
software pode interfirir em nossa vida uma modo significativo, como por exemplo no caso do funcionamento dos sistemas bancários, acarretando
na privação de acesso aos recursos finaceiros que dependemos para sobreviver.

	* Gerenciamento de testes em geral

Para que estes programas possam funcionar mantendo a confiabilidade(ISO 9116) precisam que suas funcionalidade sejam testadas de modo a garantir
a satisfação do usuário. Esses testes não pode ser feitos de qualquer maneira, portanto tem que ser padronizados de maneira que ao final
das rotinas o sistema esteja em conformidade com os requisitos do sistema, alem disso eles devem ser bem documentados para que esses dados possam 
ser analisados e usados para identificar erros decorrentes da codificação. De acordo com um estudo de 2002 os defeitos de software tem um custo de
59,5 bilhões à economia dos Estados Unidos.
	
	* Gerencimeto de versionamento em geral
	
Umas das formas de documentar o código que pode ser bastante útil para teste é uso de sistemas de versionamento que forneceram dados que
ajudaram os programadores acompanhar a evolução dos softwares que estão sendo desenvolvidos ou atualizados. Com recurso de versionamento os
erros softwares podem ser corrigidos de forma eficaz.

2. Testes
	* Porque testar?
	
Para evidenciar que os sistemas atendem aos reqiusitos especificados é preciso que sejam realizados testes para identificar erros, sejam eles
relacionados a sintaxe, regra de negócio, algoritmos e particularidades da liguagem usada no desemvolvimento. Apesar de ser quase impossível
desenvolver um sistema sem erros os testes devem garantir uma qualidade significativa que não comprometa o seu uso interruptível, já que é inviável
antever todos os fluxos possíveis do funcionamento de software, e isso se torna mais difícil e complexo conforme o porte do software que está 
sendo testado. 
Muitas empresas ainda não tem profissionais especializados na área de teste, comumente esse fato acontece de forma numericamente maior nas empresas
de pequeno porte onde o desenvolvedor desempenha esse papel, comprometendo a parcialidade do processo já que o mesmo tende a fazer testes mais
inclinados a um fluxo previamente almejado, impossibilitando do programador de enxergar falhas.
	
	* Como testar?
	
Mesmo com essas dificuldades na mudança de hábitos organizações existem técnicas que podem auxiliar a testar os softwares, dentre as quais,
é possível obter resultados significativos na qualidade do software. As técnicas mais conhecidas são: "Caixa-branca", "Caixa-preta","Caixa-cinza",
"Regressão". Essas técnicas testam se o código está processando as informações, recebendo, passando nas condições, informando erro quandos esses 
ocorrem, além de validar através de "casos de teste" se determinadas entradas depois de processadas pelo software geram as saídas esperadas. No teste
de regressão os testes anteriormente usados são feitos novamente após uma alteração ou inclusão de novos códigos, para garantir que o sistema 
não parou e funcionar após as modificações no todo.


3. Gerenciar Testes
	* Porque Gerenciar?

A importância do gerenciamento de testes para a evolução na qualidade dos softwares é que ele ajuda não apenas a entender os erros de um determinado
programa mas tambem a proporcionar que o conhecimento registrado na documentação seja utilizado para aprimorar os processos de desenvolvimento e tambem
os conhecimentos dos programadores que poderam evitar erros em outros projetos apartir do aprendizado de experiências anteriores com situções 
idênticas ou parecidas.
	
	* Como Gerenciar?
	
O primeiro passo a fazer é planejar o testes, ou seja, decidir exatamente o que vai ser feito e como, logo após isso é preciso preparar o ambiente e 
confeccionar "Casos de teste", que são dados fictícios que serão usados para verificar se o sistema está funcionando da forma adequada, depois é feito
o teste propriamente dito. Caso erros de códdigo ou conformidade com os requisitos aconteçam essas falhas serão documentadas e analisadas visando sua
correção.
	
4. Versionamento
	* O que é?
	
O versionamento é processo de documentação dos estados do sistema visando registar todo progresso do mesmo.
	
	* Porque usar?
	
Esse controle tem o objetivo guardar informações de todos os componentes de um software registrando estados e alterações, com isso é possivel
compreender o funcionamento do sistema e também identificar erros comparando os estados anteriores a atual. Caso dois desenvolvedores utilizem 
o mesmo código e um deles altere uma parte do código que estava sendo usado por um componente criado pelo outro programador este pode visualizar as
informações da alteração e adequar seu componente que está atrelado ao código modificados pelo outro programador caso necesário.
	
	* Como usar?
	
Existem programas voltados para o controle de versão e também repositórios online para que seu código possa ser acesso de qualquer computador com
internet.
	
5. Benefícios
	* Consequências do não uso
	* Benefícios do uso
		- Cooperação
6. Ferramentas recomendadas
	* Quais Ferramentas estão disponíveis
	* O Git
7. Conclusão
	* Tempo
	* Organização
	* Aperfeiçoamento
8. Referências



